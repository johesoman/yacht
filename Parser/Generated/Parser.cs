// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  mac-00315.lan
// DateTime: 12/10/2016 5:53:25 PM
// UserName: dhn03
// Input file <Parser.y - 12/10/2016 5:53:23 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Parser
{
public enum Tokens {error=2,EOF=3,ID=4,BOOL=5,INT=6,
    ERR=7,IF=8,ELSE=9,WHILE=10,RETURN=11,INTTYPE=12,
    BOOLTYPE=13,VOIDTYPE=14,LPAR=15,RPAR=16,LCUR=17,RCUR=18,
    SEMI=19,COMMA=20,ASN=21,OR=22,AND=23,EQ=24,
    NEQ=25,LT=26,GT=27,LEQ=28,GEQ=29,ADD=30,
    SUB=31,MUL=32,DIV=33,UMINUS=34,NOT=35};

public struct ValueType
#line 4 "Parser.y"
       {
	public string value;

	public Program Program;
	public FunctionDefinition Decl;
	public List<FunctionDefinition> DeclList;
	public Expression Expr;
	public List<Expression> ExprList;
	public Statement Stmt;
	public List<Statement> StmtList;
	public List<VariableDeclaration> FormalList;
	public Type Type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[48];
  private static State[] states = new State[102];
  private static string[] nonTerms = new string[] {
      "Program", "DeclList", "Decl", "Expr", "Expr1", "ExprList", "ExprRest", 
      "Stmt", "StmtList", "FormalList", "FormalRest", "Type", "$accept", };

  static Parser() {
    states[0] = new State(-4,new int[]{-1,1,-2,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4,14,6,12,85,13,86},new int[]{-3,5,-12,94});
    states[4] = new State(-2);
    states[5] = new State(-3);
    states[6] = new State(new int[]{4,7});
    states[7] = new State(new int[]{15,8});
    states[8] = new State(new int[]{12,85,13,86,16,-8},new int[]{-10,9,-12,87});
    states[9] = new State(new int[]{16,10});
    states[10] = new State(new int[]{17,11});
    states[11] = new State(-12,new int[]{-9,12});
    states[12] = new State(new int[]{18,13,17,15,8,18,10,25,11,30,4,57,31,61,35,63,6,65,5,66,15,76,12,85,13,86},new int[]{-8,14,-4,80,-5,60,-12,82});
    states[13] = new State(-5);
    states[14] = new State(-11);
    states[15] = new State(-12,new int[]{-9,16});
    states[16] = new State(new int[]{18,17,17,15,8,18,10,25,11,30,4,57,31,61,35,63,6,65,5,66,15,76,12,85,13,86},new int[]{-8,14,-4,80,-5,60,-12,82});
    states[17] = new State(-13);
    states[18] = new State(new int[]{15,19});
    states[19] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,20,-5,60});
    states[20] = new State(new int[]{16,21,22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55});
    states[21] = new State(new int[]{17,15,8,18,10,25,11,30,4,57,31,61,35,63,6,65,5,66,15,76,12,85,13,86},new int[]{-8,22,-4,80,-5,60,-12,82});
    states[22] = new State(new int[]{9,23,18,-14,17,-14,8,-14,10,-14,11,-14,4,-14,31,-14,35,-14,6,-14,5,-14,15,-14,12,-14,13,-14});
    states[23] = new State(new int[]{17,15,8,18,10,25,11,30,4,57,31,61,35,63,6,65,5,66,15,76,12,85,13,86},new int[]{-8,24,-4,80,-5,60,-12,82});
    states[24] = new State(-15);
    states[25] = new State(new int[]{15,26});
    states[26] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,27,-5,60});
    states[27] = new State(new int[]{16,28,22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55});
    states[28] = new State(new int[]{17,15,8,18,10,25,11,30,4,57,31,61,35,63,6,65,5,66,15,76,12,85,13,86},new int[]{-8,29,-4,80,-5,60,-12,82});
    states[29] = new State(-16);
    states[30] = new State(new int[]{19,79,4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,31,-5,60});
    states[31] = new State(new int[]{19,32,22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55});
    states[32] = new State(-17);
    states[33] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,34,-5,60});
    states[34] = new State(new int[]{22,-22,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,19,-22,16,-22,20,-22});
    states[35] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,36,-5,60});
    states[36] = new State(new int[]{22,-23,23,-23,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,19,-23,16,-23,20,-23});
    states[37] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,38,-5,60});
    states[38] = new State(new int[]{22,-24,23,-24,24,-24,25,-24,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,19,-24,16,-24,20,-24});
    states[39] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,40,-5,60});
    states[40] = new State(new int[]{22,-25,23,-25,24,-25,25,-25,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,19,-25,16,-25,20,-25});
    states[41] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,42,-5,60});
    states[42] = new State(new int[]{22,-26,23,-26,24,-26,25,-26,29,-26,28,-26,27,-26,26,-26,30,49,31,51,32,53,33,55,19,-26,16,-26,20,-26});
    states[43] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,44,-5,60});
    states[44] = new State(new int[]{22,-27,23,-27,24,-27,25,-27,29,-27,28,-27,27,-27,26,-27,30,49,31,51,32,53,33,55,19,-27,16,-27,20,-27});
    states[45] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,46,-5,60});
    states[46] = new State(new int[]{22,-28,23,-28,24,-28,25,-28,29,-28,28,-28,27,-28,26,-28,30,49,31,51,32,53,33,55,19,-28,16,-28,20,-28});
    states[47] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,48,-5,60});
    states[48] = new State(new int[]{22,-29,23,-29,24,-29,25,-29,29,-29,28,-29,27,-29,26,-29,30,49,31,51,32,53,33,55,19,-29,16,-29,20,-29});
    states[49] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,50,-5,60});
    states[50] = new State(new int[]{22,-30,23,-30,24,-30,25,-30,29,-30,28,-30,27,-30,26,-30,30,-30,31,-30,32,53,33,55,19,-30,16,-30,20,-30});
    states[51] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,52,-5,60});
    states[52] = new State(new int[]{22,-31,23,-31,24,-31,25,-31,29,-31,28,-31,27,-31,26,-31,30,-31,31,-31,32,53,33,55,19,-31,16,-31,20,-31});
    states[53] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,54,-5,60});
    states[54] = new State(-32);
    states[55] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,56,-5,60});
    states[56] = new State(-33);
    states[57] = new State(new int[]{21,58,15,68,19,-39,22,-39,23,-39,24,-39,25,-39,29,-39,28,-39,27,-39,26,-39,30,-39,31,-39,32,-39,33,-39,16,-39,20,-39});
    states[58] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,59,-5,60});
    states[59] = new State(new int[]{22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,19,-21,16,-21,20,-21});
    states[60] = new State(-34);
    states[61] = new State(new int[]{31,61,35,63,6,65,5,66,4,67,15,76},new int[]{-5,62});
    states[62] = new State(-35);
    states[63] = new State(new int[]{31,61,35,63,6,65,5,66,4,67,15,76},new int[]{-5,64});
    states[64] = new State(-36);
    states[65] = new State(-37);
    states[66] = new State(-38);
    states[67] = new State(new int[]{15,68,19,-39,22,-39,23,-39,24,-39,25,-39,29,-39,28,-39,27,-39,26,-39,30,-39,31,-39,32,-39,33,-39,16,-39,20,-39});
    states[68] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76,16,-43},new int[]{-6,69,-4,71,-5,60});
    states[69] = new State(new int[]{16,70});
    states[70] = new State(-40);
    states[71] = new State(new int[]{22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,20,73,16,-45},new int[]{-7,72});
    states[72] = new State(-42);
    states[73] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,74,-5,60});
    states[74] = new State(new int[]{22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55,20,73,16,-45},new int[]{-7,75});
    states[75] = new State(-44);
    states[76] = new State(new int[]{4,57,31,61,35,63,6,65,5,66,15,76},new int[]{-4,77,-5,60});
    states[77] = new State(new int[]{16,78,22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55});
    states[78] = new State(-41);
    states[79] = new State(-18);
    states[80] = new State(new int[]{19,81,22,33,23,35,24,37,25,39,29,41,28,43,27,45,26,47,30,49,31,51,32,53,33,55});
    states[81] = new State(-19);
    states[82] = new State(new int[]{4,83});
    states[83] = new State(new int[]{19,84});
    states[84] = new State(-20);
    states[85] = new State(-46);
    states[86] = new State(-47);
    states[87] = new State(new int[]{4,88});
    states[88] = new State(new int[]{20,90,16,-10},new int[]{-11,89});
    states[89] = new State(-7);
    states[90] = new State(new int[]{12,85,13,86},new int[]{-12,91});
    states[91] = new State(new int[]{4,92});
    states[92] = new State(new int[]{20,90,16,-10},new int[]{-11,93});
    states[93] = new State(-9);
    states[94] = new State(new int[]{4,95});
    states[95] = new State(new int[]{15,96});
    states[96] = new State(new int[]{12,85,13,86,16,-8},new int[]{-10,97,-12,87});
    states[97] = new State(new int[]{16,98});
    states[98] = new State(new int[]{17,99});
    states[99] = new State(-12,new int[]{-9,100});
    states[100] = new State(new int[]{18,101,17,15,8,18,10,25,11,30,4,57,31,61,35,63,6,65,5,66,15,76,12,85,13,86},new int[]{-8,14,-4,80,-5,60,-12,82});
    states[101] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-13, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-2,3});
    rules[3] = new Rule(-2, new int[]{-2,-3});
    rules[4] = new Rule(-2, new int[]{});
    rules[5] = new Rule(-3, new int[]{14,4,15,-10,16,17,-9,18});
    rules[6] = new Rule(-3, new int[]{-12,4,15,-10,16,17,-9,18});
    rules[7] = new Rule(-10, new int[]{-12,4,-11});
    rules[8] = new Rule(-10, new int[]{});
    rules[9] = new Rule(-11, new int[]{20,-12,4,-11});
    rules[10] = new Rule(-11, new int[]{});
    rules[11] = new Rule(-9, new int[]{-9,-8});
    rules[12] = new Rule(-9, new int[]{});
    rules[13] = new Rule(-8, new int[]{17,-9,18});
    rules[14] = new Rule(-8, new int[]{8,15,-4,16,-8});
    rules[15] = new Rule(-8, new int[]{8,15,-4,16,-8,9,-8});
    rules[16] = new Rule(-8, new int[]{10,15,-4,16,-8});
    rules[17] = new Rule(-8, new int[]{11,-4,19});
    rules[18] = new Rule(-8, new int[]{11,19});
    rules[19] = new Rule(-8, new int[]{-4,19});
    rules[20] = new Rule(-8, new int[]{-12,4,19});
    rules[21] = new Rule(-4, new int[]{4,21,-4});
    rules[22] = new Rule(-4, new int[]{-4,22,-4});
    rules[23] = new Rule(-4, new int[]{-4,23,-4});
    rules[24] = new Rule(-4, new int[]{-4,24,-4});
    rules[25] = new Rule(-4, new int[]{-4,25,-4});
    rules[26] = new Rule(-4, new int[]{-4,29,-4});
    rules[27] = new Rule(-4, new int[]{-4,28,-4});
    rules[28] = new Rule(-4, new int[]{-4,27,-4});
    rules[29] = new Rule(-4, new int[]{-4,26,-4});
    rules[30] = new Rule(-4, new int[]{-4,30,-4});
    rules[31] = new Rule(-4, new int[]{-4,31,-4});
    rules[32] = new Rule(-4, new int[]{-4,32,-4});
    rules[33] = new Rule(-4, new int[]{-4,33,-4});
    rules[34] = new Rule(-4, new int[]{-5});
    rules[35] = new Rule(-5, new int[]{31,-5});
    rules[36] = new Rule(-5, new int[]{35,-5});
    rules[37] = new Rule(-5, new int[]{6});
    rules[38] = new Rule(-5, new int[]{5});
    rules[39] = new Rule(-5, new int[]{4});
    rules[40] = new Rule(-5, new int[]{4,15,-6,16});
    rules[41] = new Rule(-5, new int[]{15,-4,16});
    rules[42] = new Rule(-6, new int[]{-4,-7});
    rules[43] = new Rule(-6, new int[]{});
    rules[44] = new Rule(-7, new int[]{20,-4,-7});
    rules[45] = new Rule(-7, new int[]{});
    rules[46] = new Rule(-12, new int[]{12});
    rules[47] = new Rule(-12, new int[]{13});

    aliases = new Dictionary<int, string>();
    aliases.Add(8, "if");
    aliases.Add(9, "else");
    aliases.Add(10, "while");
    aliases.Add(11, "return");
    aliases.Add(12, "int");
    aliases.Add(13, "bool");
    aliases.Add(14, "void");
    aliases.Add(15, "(");
    aliases.Add(16, ")");
    aliases.Add(17, "{");
    aliases.Add(18, "}");
    aliases.Add(19, ";");
    aliases.Add(20, ",");
    aliases.Add(21, "=");
    aliases.Add(22, "||");
    aliases.Add(23, "&&");
    aliases.Add(24, "==");
    aliases.Add(25, "!=");
    aliases.Add(26, "<");
    aliases.Add(27, ">");
    aliases.Add(28, "<=");
    aliases.Add(29, ">=");
    aliases.Add(30, "+");
    aliases.Add(31, "-");
    aliases.Add(32, "*");
    aliases.Add(33, "/");
    aliases.Add(35, "!");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> DeclList, EOF
#line 61 "Parser.y"
{
	program = new Program(ValueStack[ValueStack.Depth-2].DeclList);
}
#line default
        break;
      case 3: // DeclList -> DeclList, Decl
#line 67 "Parser.y"
{
	ValueStack[ValueStack.Depth-2].DeclList.Add(ValueStack[ValueStack.Depth-1].Decl);
	CurrentSemanticValue.DeclList = ValueStack[ValueStack.Depth-2].DeclList;
}
#line default
        break;
      case 4: // DeclList -> /* empty */
#line 72 "Parser.y"
{
	CurrentSemanticValue.DeclList = new List<FunctionDefinition>();
}
#line default
        break;
      case 5: // Decl -> "void", ID, "(", FormalList, ")", "{", StmtList, "}"
#line 78 "Parser.y"
{
	CurrentSemanticValue.Decl = new FunctionDefinition(Type.VOID, ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StmtList);
	CurrentSemanticValue.Decl.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 6: // Decl -> Type, ID, "(", FormalList, ")", "{", StmtList, "}"
#line 83 "Parser.y"
{
	CurrentSemanticValue.Decl = new FunctionDefinition(ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StmtList);
	CurrentSemanticValue.Decl.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 7: // FormalList -> Type, ID, FormalRest
#line 90 "Parser.y"
{
	ValueStack[ValueStack.Depth-1].FormalList.Add(new VariableDeclaration(ValueStack[ValueStack.Depth-3].Type,ValueStack[ValueStack.Depth-2].value));
	ValueStack[ValueStack.Depth-1].FormalList.Reverse();
	CurrentSemanticValue.FormalList = ValueStack[ValueStack.Depth-1].FormalList;
}
#line default
        break;
      case 8: // FormalList -> /* empty */
#line 96 "Parser.y"
{
	CurrentSemanticValue.FormalList = new List<VariableDeclaration>();
}
#line default
        break;
      case 9: // FormalRest -> ",", Type, ID, FormalRest
#line 102 "Parser.y"
{
	ValueStack[ValueStack.Depth-1].FormalList.Add(new VariableDeclaration(ValueStack[ValueStack.Depth-3].Type,ValueStack[ValueStack.Depth-2].value));
	CurrentSemanticValue.FormalList = ValueStack[ValueStack.Depth-1].FormalList;
}
#line default
        break;
      case 10: // FormalRest -> /* empty */
#line 107 "Parser.y"
{
	CurrentSemanticValue.FormalList = new List<VariableDeclaration>();
}
#line default
        break;
      case 11: // StmtList -> StmtList, Stmt
#line 113 "Parser.y"
{
	ValueStack[ValueStack.Depth-2].StmtList.Add(ValueStack[ValueStack.Depth-1].Stmt);
	CurrentSemanticValue.StmtList = ValueStack[ValueStack.Depth-2].StmtList;
}
#line default
        break;
      case 12: // StmtList -> /* empty */
#line 118 "Parser.y"
{
	CurrentSemanticValue.StmtList = new List<Statement>();
}
#line default
        break;
      case 13: // Stmt -> "{", StmtList, "}"
#line 124 "Parser.y"
{
	CurrentSemanticValue.Stmt = new BlockStatement(ValueStack[ValueStack.Depth-2].StmtList);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 14: // Stmt -> "if", "(", Expr, ")", Stmt
#line 129 "Parser.y"
{
	CurrentSemanticValue.Stmt = new IfStatement(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Stmt, null);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 15: // Stmt -> "if", "(", Expr, ")", Stmt, "else", Stmt
#line 134 "Parser.y"
{
	CurrentSemanticValue.Stmt = new IfStatement(ValueStack[ValueStack.Depth-5].Expr, ValueStack[ValueStack.Depth-3].Stmt, ValueStack[ValueStack.Depth-1].Stmt);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 16: // Stmt -> "while", "(", Expr, ")", Stmt
#line 139 "Parser.y"
{
	CurrentSemanticValue.Stmt = new WhileStatement(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Stmt);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 17: // Stmt -> "return", Expr, ";"
#line 144 "Parser.y"
{
	CurrentSemanticValue.Stmt = new ReturnStatement(ValueStack[ValueStack.Depth-2].Expr);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 18: // Stmt -> "return", ";"
#line 149 "Parser.y"
{
	CurrentSemanticValue.Stmt = new ReturnStatement(null);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 19: // Stmt -> Expr, ";"
#line 154 "Parser.y"
{
	CurrentSemanticValue.Stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].Expr);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 20: // Stmt -> Type, ID, ";"
#line 159 "Parser.y"
{
	CurrentSemanticValue.Stmt = new VariableDeclarationStatement(ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].value);
	CurrentSemanticValue.Stmt.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 21: // Expr -> ID, "=", Expr
#line 166 "Parser.y"
{
	CurrentSemanticValue.Expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].value, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 22: // Expr -> Expr, "||", Expr
#line 172 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.OR, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 23: // Expr -> Expr, "&&", Expr
#line 177 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.AND, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 24: // Expr -> Expr, "==", Expr
#line 183 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.EQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 25: // Expr -> Expr, "!=", Expr
#line 188 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.NEQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 26: // Expr -> Expr, ">=", Expr
#line 193 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.GEQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 27: // Expr -> Expr, "<=", Expr
#line 198 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.LEQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 28: // Expr -> Expr, ">", Expr
#line 203 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.GT, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 29: // Expr -> Expr, "<", Expr
#line 208 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.LT, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 30: // Expr -> Expr, "+", Expr
#line 214 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.ADD, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 31: // Expr -> Expr, "-", Expr
#line 219 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.SUB, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 32: // Expr -> Expr, "*", Expr
#line 224 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.MUL, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 33: // Expr -> Expr, "/", Expr
#line 229 "Parser.y"
{
	CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.DIV, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 34: // Expr -> Expr1
#line 234 "Parser.y"
{ 
	CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr;
}
#line default
        break;
      case 35: // Expr1 -> "-", Expr1
#line 240 "Parser.y"
{
	CurrentSemanticValue.Expr = new UnaryOperatorExpression(UnaryOperatorExpression.OperatorType.NEG, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 36: // Expr1 -> "!", Expr1
#line 245 "Parser.y"
{
	CurrentSemanticValue.Expr = new UnaryOperatorExpression(UnaryOperatorExpression.OperatorType.NOT, ValueStack[ValueStack.Depth-1].Expr);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 37: // Expr1 -> INT
#line 250 "Parser.y"
{
	CurrentSemanticValue.Expr = new IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].value);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 38: // Expr1 -> BOOL
#line 255 "Parser.y"
{
	CurrentSemanticValue.Expr = new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].value);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 39: // Expr1 -> ID
#line 260 "Parser.y"
{
	CurrentSemanticValue.Expr = new VariableExpression(ValueStack[ValueStack.Depth-1].value);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 40: // Expr1 -> ID, "(", ExprList, ")"
#line 265 "Parser.y"
{
	CurrentSemanticValue.Expr = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].value,ValueStack[ValueStack.Depth-2].ExprList);
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 41: // Expr1 -> "(", Expr, ")"
#line 270 "Parser.y"
{
	CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-2].Expr;
	CurrentSemanticValue.Expr.SetLocation(CurrentLocationSpan);
}
#line default
        break;
      case 42: // ExprList -> Expr, ExprRest
#line 278 "Parser.y"
{
	ValueStack[ValueStack.Depth-1].ExprList.Add(ValueStack[ValueStack.Depth-2].Expr);
	ValueStack[ValueStack.Depth-1].ExprList.Reverse();
	CurrentSemanticValue.ExprList = ValueStack[ValueStack.Depth-1].ExprList;
}
#line default
        break;
      case 43: // ExprList -> /* empty */
#line 284 "Parser.y"
{
	CurrentSemanticValue.ExprList = new List<Expression>();
}
#line default
        break;
      case 44: // ExprRest -> ",", Expr, ExprRest
#line 290 "Parser.y"
{
	ValueStack[ValueStack.Depth-1].ExprList.Add(ValueStack[ValueStack.Depth-2].Expr);
	CurrentSemanticValue.ExprList = ValueStack[ValueStack.Depth-1].ExprList;
}
#line default
        break;
      case 45: // ExprRest -> /* empty */
#line 295 "Parser.y"
{
	CurrentSemanticValue.ExprList = new List<Expression>();
}
#line default
        break;
      case 46: // Type -> "int"
#line 301 "Parser.y"
{
	CurrentSemanticValue.Type = Type.INT;
}
#line default
        break;
      case 47: // Type -> "bool"
#line 305 "Parser.y"
{
	CurrentSemanticValue.Type = Type.BOOL;
}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 312 "Parser.y"
public Program program;
public Parser( Scanner s ) : base( s ) { }
#line default
}
}
