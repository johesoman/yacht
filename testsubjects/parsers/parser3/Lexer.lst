
// ==========================================================================
//  GPLEX error listing for lex source file <Lexer.l>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  DESKTOP-V94II0C
//  DateTime: 2018-11-30 14:18:13
//  UserName: jojjo
// ==========================================================================


%option out:Generated/Lexer.cs
%namespace Parser
%using QUT.Gppg;

alpha   [a-zA-Z]
digit   [0-9]
alphanum    {alpha}|{digit}
boolean	['true','false']

%%

" "|\r|\n       { }
//.*$           { }

"if"         	{ return (int) Tokens.IF; }
"else"          { return (int) Tokens.ELSE; }
"while"         { return (int) Tokens.WHILE; }
"return"        { return (int) Tokens.RETURN; }
"int"           { return (int) Tokens.INT; }
"bool"          { return (int) Tokens.BOOL; }
"void"          { return (int) Tokens.VOID; }

";"             { return (int) Tokens.SEMI; }
"("             { return (int) Tokens.LPAR; }
")"             { return (int) Tokens.RPAR; }
","             { return (int) Tokens.COMMA; }
"{"             { return (int) Tokens.LCUR; }
"}"             { return (int) Tokens.RCUR; }


"/"				{ return (int) Tokens.DIV; }
"-"             { return (int) Tokens.SUB; }
"*"             { return (int) Tokens.MUL; }
"+"             { return (int) Tokens.PLUS; }
"="             { return (int) Tokens.ASN; }
"=="            { return (int) Tokens.EQUALS; }
"&&"            { return (int) Tokens.AND; }
"!="            { return (int) Tokens.NOTEQ; }
"<"             { return (int) Tokens.LESSTHN; }
">"             { return (int) Tokens.GRTTHN; }
"<="            { return (int) Tokens.LSOREQ; }
">="            { return (int) Tokens.GROREQ; }
"!"             { return (int) Tokens.NOT; }
"\"             { return (int) Tokens.BACKSL; }
// Error: Literal string terminated by end of line
// -----------------------------------------------
"|"             { return (int) Tokens.OR; }


{alpha}{alphanum}*      { yylval.value = yytext;
                          return (int) Tokens.ID; 
                        }
                        
{digit}+                { yylval.value = yytext;
                          return (int) Tokens.INT; 
                        }

{boolean}				{ yylval.value = yytext;
						  return (int) Tokens.BOOL;
						}
                        
.                       { yylval.value = yytext;
                          return (int) Tokens.ERR;
                        }

                        
    %{
      yylloc = new LexLocation(tokLin, tokCol, tokELin, tokECol);
    %}

%% 

override public void yyerror(string msg, object[] arg) {
  Console.WriteLine("{0} on line {1} column {2}", msg, yylloc.StartLine, yylloc.StartColumn);
}// ==========================================================================

