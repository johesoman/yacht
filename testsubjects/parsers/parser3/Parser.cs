// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-V94II0C
// DateTime: 2018-12-11 15:17:01
// UserName: jojjo
// Input file <Parser.y - 2018-12-11 15:16:58>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Parser
{
public enum Tokens {error=2,EOF=3,ID=4,INT=5,ERR=6,
    SEMI=7,PLUS=8,ASN=9,LPAR=10,RPAR=11,COMMA=12,
    OR=13,AND=14,EQUALS=15,NOTEQ=16,LESSTHN=17,GRTTHN=18,
    LSOREQ=19,GROREQ=20,SUB=21,MUL=22,DIV=23,NOT=24,
    LCUR=25,RCUR=26,IF=27,ELSE=28,WHILE=29,RETURN=30,
    VOID=31,INTEGER=32,BOOLEAN=33,TRUE=34,FALSE=35,UMINUS=36};

public struct ValueType
#line 4 "Parser.y"
       {
  public string value;
  public List<Declaration> Start;
  public Expression Expr;
  public Declaration Decl;

  public List<ExprListParent> ExprList;
  
  public List<FormalListParent> Formal;
  public Type Type;
  public Statement Stmnt;
  public List<Statement> Statements;

}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[52];
  private static State[] states = new State[105];
  private static string[] nonTerms = new string[] {
      "Start", "Decl", "Stmnt", "Expr", "ExprPrime", "Express", "UopExpr", "Expression", 
      "Formal", "Type", "ExprList", "Statements", "BlockStatement", "P", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{32,89,33,90,31,96,3,104},new int[]{-14,1,-1,3,-2,5,-10,7});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{32,89,33,90,31,96,3,-4},new int[]{-1,6,-2,5,-10,7});
    states[6] = new State(-5);
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{10,9});
    states[9] = new State(new int[]{32,89,33,90,11,-12,12,-12},new int[]{-9,10,-10,94});
    states[10] = new State(new int[]{11,11,12,91});
    states[11] = new State(new int[]{25,12});
    states[12] = new State(-14,new int[]{-12,13});
    states[13] = new State(new int[]{26,14,25,16,27,20,29,27,30,32,4,36,5,66,35,67,34,68,10,75,24,79,21,81,32,89,33,90},new int[]{-3,15,-8,84,-6,39,-5,64,-4,65,-7,78,-10,86});
    states[14] = new State(-6);
    states[15] = new State(-13);
    states[16] = new State(-14,new int[]{-13,17,-12,19});
    states[17] = new State(new int[]{26,18});
    states[18] = new State(-16);
    states[19] = new State(new int[]{25,16,27,20,29,27,30,32,4,36,5,66,35,67,34,68,10,75,24,79,21,81,32,89,33,90,26,-15},new int[]{-3,15,-8,84,-6,39,-5,64,-4,65,-7,78,-10,86});
    states[20] = new State(new int[]{10,21});
    states[21] = new State(new int[]{4,36,5,66,35,67,34,68,10,75,24,79,21,81},new int[]{-8,22,-6,39,-5,64,-4,65,-7,78});
    states[22] = new State(new int[]{11,23});
    states[23] = new State(new int[]{25,16,27,20,29,27,30,32,4,36,5,66,35,67,34,68,10,75,24,79,21,81,32,89,33,90},new int[]{-3,24,-8,84,-6,39,-5,64,-4,65,-7,78,-10,86});
    states[24] = new State(new int[]{28,25,26,-17,25,-17,27,-17,29,-17,30,-17,4,-17,5,-17,35,-17,34,-17,10,-17,24,-17,21,-17,32,-17,33,-17});
    states[25] = new State(new int[]{25,16,27,20,29,27,30,32,4,36,5,66,35,67,34,68,10,75,24,79,21,81,32,89,33,90},new int[]{-3,26,-8,84,-6,39,-5,64,-4,65,-7,78,-10,86});
    states[26] = new State(-18);
    states[27] = new State(new int[]{10,28});
    states[28] = new State(new int[]{4,36,5,66,35,67,34,68,10,75,24,79,21,81},new int[]{-8,29,-6,39,-5,64,-4,65,-7,78});
    states[29] = new State(new int[]{11,30});
    states[30] = new State(new int[]{25,16,27,20,29,27,30,32,4,36,5,66,35,67,34,68,10,75,24,79,21,81,32,89,33,90},new int[]{-3,31,-8,84,-6,39,-5,64,-4,65,-7,78,-10,86});
    states[31] = new State(-19);
    states[32] = new State(new int[]{7,35,4,36,5,66,35,67,34,68,10,75,24,79,21,81},new int[]{-8,33,-6,39,-5,64,-4,65,-7,78});
    states[33] = new State(new int[]{7,34});
    states[34] = new State(-20);
    states[35] = new State(-21);
    states[36] = new State(new int[]{9,37,10,70,8,-48,21,-48,22,-48,23,-48,14,-48,13,-48,17,-48,18,-48,20,-48,19,-48,16,-48,15,-48,7,-48,11,-48,12,-48});
    states[37] = new State(new int[]{4,36,5,66,35,67,34,68,10,75,24,79,21,81},new int[]{-8,38,-6,39,-5,64,-4,65,-7,78});
    states[38] = new State(-24);
    states[39] = new State(new int[]{8,40,21,42,22,44,23,46,14,48,13,50,17,52,18,54,20,56,19,58,16,60,15,62,7,-25,11,-25,12,-25});
    states[40] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,41,-5,64,-4,65,-7,78});
    states[41] = new State(new int[]{8,-32,21,-32,22,44,23,46,14,-32,13,-32,17,-32,18,-32,20,-32,19,-32,16,-32,15,-32,7,-32,11,-32,12,-32});
    states[42] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,43,-5,64,-4,65,-7,78});
    states[43] = new State(new int[]{8,-33,21,-33,22,44,23,46,14,-33,13,-33,17,-33,18,-33,20,-33,19,-33,16,-33,15,-33,7,-33,11,-33,12,-33});
    states[44] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,45,-5,64,-4,65,-7,78});
    states[45] = new State(-34);
    states[46] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,47,-5,64,-4,65,-7,78});
    states[47] = new State(-35);
    states[48] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,49,-5,64,-4,65,-7,78});
    states[49] = new State(new int[]{8,40,21,42,22,44,23,46,14,-36,13,-36,17,52,18,54,20,56,19,58,16,60,15,62,7,-36,11,-36,12,-36});
    states[50] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,51,-5,64,-4,65,-7,78});
    states[51] = new State(new int[]{8,40,21,42,22,44,23,46,14,-37,13,-37,17,52,18,54,20,56,19,58,16,60,15,62,7,-37,11,-37,12,-37});
    states[52] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,53,-5,64,-4,65,-7,78});
    states[53] = new State(new int[]{8,40,21,42,22,44,23,46,14,-38,13,-38,17,-38,18,-38,20,-38,19,-38,16,-38,15,-38,7,-38,11,-38,12,-38});
    states[54] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,55,-5,64,-4,65,-7,78});
    states[55] = new State(new int[]{8,40,21,42,22,44,23,46,14,-39,13,-39,17,-39,18,-39,20,-39,19,-39,16,-39,15,-39,7,-39,11,-39,12,-39});
    states[56] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,57,-5,64,-4,65,-7,78});
    states[57] = new State(new int[]{8,40,21,42,22,44,23,46,14,-40,13,-40,17,-40,18,-40,20,-40,19,-40,16,-40,15,-40,7,-40,11,-40,12,-40});
    states[58] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,59,-5,64,-4,65,-7,78});
    states[59] = new State(new int[]{8,40,21,42,22,44,23,46,14,-41,13,-41,17,-41,18,-41,20,-41,19,-41,16,-41,15,-41,7,-41,11,-41,12,-41});
    states[60] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,61,-5,64,-4,65,-7,78});
    states[61] = new State(new int[]{8,40,21,42,22,44,23,46,14,-42,13,-42,17,-42,18,-42,20,-42,19,-42,16,-42,15,-42,7,-42,11,-42,12,-42});
    states[62] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-6,63,-5,64,-4,65,-7,78});
    states[63] = new State(new int[]{8,40,21,42,22,44,23,46,14,-43,13,-43,17,-43,18,-43,20,-43,19,-43,16,-43,15,-43,7,-43,11,-43,12,-43});
    states[64] = new State(-44);
    states[65] = new State(-28);
    states[66] = new State(-45);
    states[67] = new State(-46);
    states[68] = new State(-47);
    states[69] = new State(new int[]{10,70,8,-48,21,-48,22,-48,23,-48,14,-48,13,-48,17,-48,18,-48,20,-48,19,-48,16,-48,15,-48,7,-48,11,-48,12,-48});
    states[70] = new State(new int[]{4,36,5,66,35,67,34,68,10,75,24,79,21,81,11,-51,12,-51},new int[]{-11,71,-8,83,-6,39,-5,64,-4,65,-7,78});
    states[71] = new State(new int[]{11,72,12,73});
    states[72] = new State(-30);
    states[73] = new State(new int[]{4,36,5,66,35,67,34,68,10,75,24,79,21,81},new int[]{-8,74,-6,39,-5,64,-4,65,-7,78});
    states[74] = new State(-50);
    states[75] = new State(new int[]{4,36,5,66,35,67,34,68,10,75,24,79,21,81},new int[]{-8,76,-6,39,-5,64,-4,65,-7,78});
    states[76] = new State(new int[]{11,77});
    states[77] = new State(-29);
    states[78] = new State(-31);
    states[79] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-5,80,-4,65,-7,78});
    states[80] = new State(-26);
    states[81] = new State(new int[]{5,66,35,67,34,68,4,69,10,75,24,79,21,81},new int[]{-5,82,-4,65,-7,78});
    states[82] = new State(-27);
    states[83] = new State(-49);
    states[84] = new State(new int[]{7,85});
    states[85] = new State(-22);
    states[86] = new State(new int[]{4,87});
    states[87] = new State(new int[]{7,88});
    states[88] = new State(-23);
    states[89] = new State(-8);
    states[90] = new State(-9);
    states[91] = new State(new int[]{32,89,33,90},new int[]{-10,92});
    states[92] = new State(new int[]{4,93});
    states[93] = new State(-11);
    states[94] = new State(new int[]{4,95});
    states[95] = new State(-10);
    states[96] = new State(new int[]{4,97});
    states[97] = new State(new int[]{10,98});
    states[98] = new State(new int[]{32,89,33,90,11,-12,12,-12},new int[]{-9,99,-10,94});
    states[99] = new State(new int[]{11,100,12,91});
    states[100] = new State(new int[]{25,101});
    states[101] = new State(-14,new int[]{-12,102});
    states[102] = new State(new int[]{26,103,25,16,27,20,29,27,30,32,4,36,5,66,35,67,34,68,10,75,24,79,21,81,32,89,33,90},new int[]{-3,15,-8,84,-6,39,-5,64,-4,65,-7,78,-10,86});
    states[103] = new State(-7);
    states[104] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-15, new int[]{-14,3});
    rules[2] = new Rule(-14, new int[]{-1,3});
    rules[3] = new Rule(-14, new int[]{3});
    rules[4] = new Rule(-1, new int[]{-2});
    rules[5] = new Rule(-1, new int[]{-2,-1});
    rules[6] = new Rule(-2, new int[]{-10,4,10,-9,11,25,-12,26});
    rules[7] = new Rule(-2, new int[]{31,4,10,-9,11,25,-12,26});
    rules[8] = new Rule(-10, new int[]{32});
    rules[9] = new Rule(-10, new int[]{33});
    rules[10] = new Rule(-9, new int[]{-10,4});
    rules[11] = new Rule(-9, new int[]{-9,12,-10,4});
    rules[12] = new Rule(-9, new int[]{});
    rules[13] = new Rule(-12, new int[]{-12,-3});
    rules[14] = new Rule(-12, new int[]{});
    rules[15] = new Rule(-13, new int[]{-12});
    rules[16] = new Rule(-3, new int[]{25,-13,26});
    rules[17] = new Rule(-3, new int[]{27,10,-8,11,-3});
    rules[18] = new Rule(-3, new int[]{27,10,-8,11,-3,28,-3});
    rules[19] = new Rule(-3, new int[]{29,10,-8,11,-3});
    rules[20] = new Rule(-3, new int[]{30,-8,7});
    rules[21] = new Rule(-3, new int[]{30,7});
    rules[22] = new Rule(-3, new int[]{-8,7});
    rules[23] = new Rule(-3, new int[]{-10,4,7});
    rules[24] = new Rule(-8, new int[]{4,9,-8});
    rules[25] = new Rule(-8, new int[]{-6});
    rules[26] = new Rule(-7, new int[]{24,-5});
    rules[27] = new Rule(-7, new int[]{21,-5});
    rules[28] = new Rule(-5, new int[]{-4});
    rules[29] = new Rule(-5, new int[]{10,-8,11});
    rules[30] = new Rule(-5, new int[]{4,10,-11,11});
    rules[31] = new Rule(-5, new int[]{-7});
    rules[32] = new Rule(-6, new int[]{-6,8,-6});
    rules[33] = new Rule(-6, new int[]{-6,21,-6});
    rules[34] = new Rule(-6, new int[]{-6,22,-6});
    rules[35] = new Rule(-6, new int[]{-6,23,-6});
    rules[36] = new Rule(-6, new int[]{-6,14,-6});
    rules[37] = new Rule(-6, new int[]{-6,13,-6});
    rules[38] = new Rule(-6, new int[]{-6,17,-6});
    rules[39] = new Rule(-6, new int[]{-6,18,-6});
    rules[40] = new Rule(-6, new int[]{-6,20,-6});
    rules[41] = new Rule(-6, new int[]{-6,19,-6});
    rules[42] = new Rule(-6, new int[]{-6,16,-6});
    rules[43] = new Rule(-6, new int[]{-6,15,-6});
    rules[44] = new Rule(-6, new int[]{-5});
    rules[45] = new Rule(-4, new int[]{5});
    rules[46] = new Rule(-4, new int[]{35});
    rules[47] = new Rule(-4, new int[]{34});
    rules[48] = new Rule(-4, new int[]{4});
    rules[49] = new Rule(-11, new int[]{-8});
    rules[50] = new Rule(-11, new int[]{-11,12,-8});
    rules[51] = new Rule(-11, new int[]{});

    aliases = new Dictionary<int, string>();
    aliases.Add(7, ";");
    aliases.Add(8, "+");
    aliases.Add(9, "=");
    aliases.Add(10, "(");
    aliases.Add(11, ")");
    aliases.Add(12, ",");
    aliases.Add(13, "||");
    aliases.Add(14, "&&");
    aliases.Add(15, "==");
    aliases.Add(16, "!=");
    aliases.Add(17, "<");
    aliases.Add(18, ">");
    aliases.Add(19, "<=");
    aliases.Add(20, ">=");
    aliases.Add(21, "-");
    aliases.Add(22, "*");
    aliases.Add(23, "/");
    aliases.Add(24, "!");
    aliases.Add(25, "{");
    aliases.Add(26, "}");
    aliases.Add(27, "if");
    aliases.Add(28, "else");
    aliases.Add(29, "while");
    aliases.Add(30, "return");
    aliases.Add(31, "void");
    aliases.Add(32, "int");
    aliases.Add(33, "bool");
    aliases.Add(34, "true");
    aliases.Add(35, "false");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // P -> Start, EOF
#line 85 "Parser.y"
               {  Program = new Program(ValueStack[ValueStack.Depth-2].Start);}
#line default
        break;
      case 4: // Start -> Decl
#line 89 "Parser.y"
               { CurrentSemanticValue.Start = new List<Declaration>(); CurrentSemanticValue.Start.Add(ValueStack[ValueStack.Depth-1].Decl); }
#line default
        break;
      case 5: // Start -> Decl, Start
#line 90 "Parser.y"
                    { CurrentSemanticValue.Start = ValueStack[ValueStack.Depth-1].Start; CurrentSemanticValue.Start.Add(ValueStack[ValueStack.Depth-2].Decl); }
#line default
        break;
      case 6: // Decl -> Type, ID, "(", Formal, ")", "{", Statements, "}"
#line 93 "Parser.y"
                                                   { CurrentSemanticValue.Decl = new TypeDeclaration(ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].Formal, ValueStack[ValueStack.Depth-2].Statements ); CurrentSemanticValue.Decl.SetLocation(LocationStack[LocationStack.Depth-8]); }
#line default
        break;
      case 7: // Decl -> "void", ID, "(", Formal, ")", "{", Statements, "}"
#line 94 "Parser.y"
                                                    { CurrentSemanticValue.Decl = new VoidDeclaration(ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].Formal, ValueStack[ValueStack.Depth-2].Statements ); CurrentSemanticValue.Decl.SetLocation(LocationStack[LocationStack.Depth-8]); }
#line default
        break;
      case 8: // Type -> "int"
#line 97 "Parser.y"
              { CurrentSemanticValue.Type = new Type(Type.Typ.INT); CurrentSemanticValue.Type.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 9: // Type -> "bool"
#line 98 "Parser.y"
               { CurrentSemanticValue.Type = new Type(Type.Typ.BOOL); CurrentSemanticValue.Type.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 10: // Formal -> Type, ID
#line 101 "Parser.y"
                    { CurrentSemanticValue.Formal = new List<FormalListParent>(); CurrentSemanticValue.Formal.Add(new FormalList(ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].value)); }
#line default
        break;
      case 11: // Formal -> Formal, ",", Type, ID
#line 102 "Parser.y"
                          { CurrentSemanticValue.Formal = ValueStack[ValueStack.Depth-4].Formal; CurrentSemanticValue.Formal.Add(new FormalList(ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].value)); }
#line default
        break;
      case 13: // Statements -> Statements, Stmnt
#line 107 "Parser.y"
                                { CurrentSemanticValue.Statements = ValueStack[ValueStack.Depth-2].Statements; CurrentSemanticValue.Statements.Add(ValueStack[ValueStack.Depth-1].Stmnt); }
#line default
        break;
      case 14: // Statements -> /* empty */
#line 108 "Parser.y"
             { CurrentSemanticValue.Statements = new List<Statement>(); }
#line default
        break;
      case 15: // BlockStatement -> Statements
#line 111 "Parser.y"
                               { CurrentSemanticValue.Statements = ValueStack[ValueStack.Depth-1].Statements; }
#line default
        break;
      case 16: // Stmnt -> "{", BlockStatement, "}"
#line 115 "Parser.y"
                                     { CurrentSemanticValue.Stmnt = new BlockStatement(ValueStack[ValueStack.Depth-2].Statements); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 17: // Stmnt -> "if", "(", Expression, ")", Stmnt
#line 116 "Parser.y"
                                     { CurrentSemanticValue.Stmnt = new IfStatement(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Stmnt, null); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-5]); }
#line default
        break;
      case 18: // Stmnt -> "if", "(", Expression, ")", Stmnt, "else", Stmnt
#line 117 "Parser.y"
                                                 { CurrentSemanticValue.Stmnt = new IfStatement(ValueStack[ValueStack.Depth-5].Expr,ValueStack[ValueStack.Depth-3].Stmnt, ValueStack[ValueStack.Depth-1].Stmnt); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-7]); }
#line default
        break;
      case 19: // Stmnt -> "while", "(", Expression, ")", Stmnt
#line 118 "Parser.y"
                                      { CurrentSemanticValue.Stmnt = new WhileStatement(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Stmnt); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-5]); }
#line default
        break;
      case 20: // Stmnt -> "return", Expression, ";"
#line 119 "Parser.y"
                             { CurrentSemanticValue.Stmnt = new ReturnStatement(ValueStack[ValueStack.Depth-2].Expr); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 21: // Stmnt -> "return", ";"
#line 120 "Parser.y"
                  { CurrentSemanticValue.Stmnt = new ReturnStatement(null); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 22: // Stmnt -> Expression, ";"
#line 121 "Parser.y"
                     { CurrentSemanticValue.Stmnt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].Expr); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-2]);}
#line default
        break;
      case 23: // Stmnt -> Type, ID, ";"
#line 122 "Parser.y"
                  { CurrentSemanticValue.Stmnt = new InitializationStatement(ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].value); CurrentSemanticValue.Stmnt.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 24: // Expression -> ID, "=", Expression
#line 126 "Parser.y"
                                      { CurrentSemanticValue.Expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].value,ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 25: // Expression -> Express
#line 127 "Parser.y"
               {CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
#line default
        break;
      case 26: // UopExpr -> "!", ExprPrime
#line 131 "Parser.y"
                          { CurrentSemanticValue.Expr = new UniversalOperatorExpression(UniversalOperatorExpression.Type.NOT, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 27: // UopExpr -> "-", ExprPrime
#line 132 "Parser.y"
                    { CurrentSemanticValue.Expr = new UniversalOperatorExpression(UniversalOperatorExpression.Type.SUB, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 28: // ExprPrime -> Expr
#line 136 "Parser.y"
                        {CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr;}
#line default
        break;
      case 29: // ExprPrime -> "(", Expression, ")"
#line 137 "Parser.y"
                               {CurrentSemanticValue.Expr = new CastExpression(ValueStack[ValueStack.Depth-2].Expr); }
#line default
        break;
      case 30: // ExprPrime -> ID, "(", ExprList, ")"
#line 138 "Parser.y"
                                { CurrentSemanticValue.Expr = new ListExpression(ValueStack[ValueStack.Depth-4].value,ValueStack[ValueStack.Depth-2].ExprList); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-4]); }
#line default
        break;
      case 31: // ExprPrime -> UopExpr
#line 140 "Parser.y"
                       {CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
#line default
        break;
      case 32: // Express -> Express, "+", Express
#line 145 "Parser.y"
                                 { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.ADD, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 33: // Express -> Express, "-", Express
#line 146 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.SUB, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 34: // Express -> Express, "*", Express
#line 147 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.MUL, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 35: // Express -> Express, "/", Express
#line 148 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.DIV, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 36: // Express -> Express, "&&", Express
#line 149 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.AND, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 37: // Express -> Express, "||", Express
#line 150 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.OR, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 38: // Express -> Express, "<", Express
#line 151 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.LESSTHN, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 39: // Express -> Express, ">", Express
#line 152 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.GRTTHN, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 40: // Express -> Express, ">=", Express
#line 153 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.GROREQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 41: // Express -> Express, "<=", Express
#line 154 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.LESSOREQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 42: // Express -> Express, "!=", Express
#line 155 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.NOTEQ, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 43: // Express -> Express, "==", Express
#line 156 "Parser.y"
                          { CurrentSemanticValue.Expr = new BinaryOperatorExpression(BinaryOperatorExpression.Type.EQUALS, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 44: // Express -> ExprPrime
#line 157 "Parser.y"
                   {CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr;}
#line default
        break;
      case 45: // Expr -> INT
#line 163 "Parser.y"
                   { CurrentSemanticValue.Expr = new NumberExpression(ValueStack[ValueStack.Depth-1].value); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 46: // Expr -> "false"
#line 164 "Parser.y"
                  { CurrentSemanticValue.Expr = new BooleanExpression(false); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 47: // Expr -> "true"
#line 165 "Parser.y"
                 { CurrentSemanticValue.Expr = new BooleanExpression(true); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 48: // Expr -> ID
#line 166 "Parser.y"
                                { CurrentSemanticValue.Expr = new IdentifierExpression(ValueStack[ValueStack.Depth-1].value); CurrentSemanticValue.Expr.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 49: // ExprList -> Expression
#line 169 "Parser.y"
                             { CurrentSemanticValue.ExprList = new List<ExprListParent>(); CurrentSemanticValue.ExprList.Add(new ExprList(ValueStack[ValueStack.Depth-1].Expr)); }
#line default
        break;
      case 50: // ExprList -> ExprList, ",", Expression
#line 170 "Parser.y"
                                  { CurrentSemanticValue.ExprList = ValueStack[ValueStack.Depth-3].ExprList; CurrentSemanticValue.ExprList.Add(new ExprList(ValueStack[ValueStack.Depth-1].Expr)); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 177 "Parser.y"

public Parser(Scanner s) : base(s) { }
public Program Program; 






#line default
}
}
