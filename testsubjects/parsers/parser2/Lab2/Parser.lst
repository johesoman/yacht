
// ==========================================================================
//  GPPG error listing for yacc source file <Parser.y - 2018-12-12 21:05:22>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  LAPTOP-B7BUAEVP
//  DateTime: 2018-12-12 21:05:36
//  UserName: Ray
// ==========================================================================


%output=Generated/Parser.cs
%namespace Parser

%union {
  public string value;

  public DeclarationList P;
  public Declaration DECL;
  public Statement S;
  public List<Statement> SQ;
  public List<Parameter> FL;
  public Type_ T;

  public Expression E;
  public List<Expression> EL;
}

%token <value> ID
%token <value> NUM
%token <value> ERR

%token SEMI ";"
%token ASN "="
%token LPAR "("
%token RPAR ")"
%token COMMA ","
%token LBRA "{"
%token RBRA "}"
%token INT "int"
%token BOOL "bool"
%token IF "if"
%token ELSE "else"
%token WHILE "while"
%token RETURN "return"
%token TRUE "true"
%token FALSE "false"
%token VOID "void"
%token BOP "bop"
%token UOP "uop"
%token UOP "-"
//^^^^
// Warning: Declaring an additional alias, -, for token UOP
// --------------------------------------------------------

%type <P> P
%type <DECL> Decl
%type <S> S, Stmt
%type <SQ> Sq
%type <FL> FormalList, Fl
%type <T> Type
%type <E> Expr, F
%type <EL> ExprList, El

%%

Program : P { Program = $1; }
        ;    

P : Decl P  { $2.Add($1); $$ = $2; $$.SetLocation(@1);}
  |         { $$ = new DeclarationList(); }
  ;                                      

Decl : Type ID "(" FormalList ")" "{" S "}"       { $$ = new Declaration($1, $2, $4, $7); $$.SetLocation(@1); }
     | "void" ID "(" FormalList ")" "{" S "}"     { $$ = new Declaration(Type_.NULL, $2, $4, $7); $$.SetLocation(@1); }
	   ;

S : Sq  { $$ = new SequenceStatement($1); $$.SetLocation(@1); }
  ;   

Sq : Stmt Sq	{ $2.Add($1); $$ = $2;}
   |			{ $$ = new List<Statement>(); }
   ;

FormalList : Type ID Fl   { $$ = $3; $$.Add(new Parameter($1, $2)); }
		       |              { $$ = new List<Parameter>(); }
           ; 

Fl : "," Type ID Fl { $$ = $4; $$.Add(new Parameter($2, $3));} 
   |                { $$ = new List<Parameter>(); }
   ; 

Type : "int"  { $$ =  Type_.INT;  }
     | "bool" { $$ =  Type_.BOOL; }
     ; 

Stmt  :  "{" S "}"                              { $$ = new ScopeStatement($2); $$.SetLocation(@1); }
      |  "if" "(" Expr ")" Stmt                 { $$ = new IfStatement($3, $5); $$.SetLocation(@1); }
      |  "if" "(" Expr ")" Stmt "else" Stmt     { $$ = new IfElseStatement($3, $5, $7); $$.SetLocation(@1); }
      |  "while" "(" Expr ")" Stmt              { $$ = new WhileStatement($3, $5); $$.SetLocation(@1); }
      |  "return" Expr ";"                      { $$ = new ReturnStatement($2); $$.SetLocation(@1); }
      |  "return" ";"                           { $$ = new ReturnStatement(null); $$.SetLocation(@1); }
      |  Expr ";"                               { $$ = new ExpressionStatement($1); $$.SetLocation(@1); }
      |  Type ID ";"                            { $$ = new DeclareStatement($1, $2); $$.SetLocation(@1); }
	    ;

Expr : F				          { $$ = $1; $$.SetLocation(@1); }
     | Expr "-" F         { $$ = new BopExpression($1, $3); $$.SetLocation(@1); }
     | Expr "bop" F 	    { $$ = new BopExpression($1, $3); $$.SetLocation(@1); }
     ;		

F : NUM						  { $$ = new NumberExpression($1); $$.SetLocation(@1); }
  | "true"					{ $$ = new BoolExpression(true); $$.SetLocation(@1); }
  | "false"					{ $$ = new BoolExpression(false); $$.SetLocation(@1); }
  | ID "=" F				{ $$ = new AssignmentExpression($1, $3); $$.SetLocation(@1); }
  | ID						  { $$ = new IdentifierExpression($1); $$.SetLocation(@1); }
  | "uop" F					{ $$ = new UopExpression($2); $$.SetLocation(@1); }
  | ID "(" ExprList ")"		{ $$ = new LetExpression($1, $3); $$.SetLocation(@1); }
  | "(" Expr ")"			{ $$ = new PsExpression($2); $$.SetLocation(@1); }
  ;

ExprList : Expr El			{ $2.Add($1); $$ = $2; }
         |              { $$ = new List<Expression>(); }
         ;

El : "," Expr El			{ $$ = $3; $$.Add($2); }
   | 						      { $$ = new List<Expression>(); }
   ;	

%%

public Parser( Scanner s ) : base( s ) { }
public DeclarationList Program; // ==========================================================================

