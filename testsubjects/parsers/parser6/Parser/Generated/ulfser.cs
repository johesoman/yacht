// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LEC-CZC4271HBJ
// DateTime: 2018-12-03 13:28:51
// UserName: uef16001
// Input file <Parser.y - 2018-12-03 13:28:34>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Parser
{
public enum Tokens {error=2,EOF=3,ID=4,INT=5,ERR=6,
    VOID=7,LPAR=8,RPAR=9,LCUR=10,RCUR=11,COM=12,
    BOOL=13,IF=14,ELSE=15,WHILE=16,SEMI=17,BOP=18,
    UOP=19,TRUE=20,FALSE=21,RETURN=22,EQ=23,THEN=24,
    NOBOP=25};

public struct ValueType
#line 6 "Parser.y"
       {
	public string value;
	//public int intValue;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[39];
  private static State[] states = new State[81];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Decl", "Decls", "Type", "FormalList", "Stmts", "Stmt", 
      "FirstID", "NotFirstID", "Expr", "FExpr", "ExprList", "NotFirstExpr", };

  static Parser() {
    states[0] = new State(new int[]{5,72,13,64,7,73,3,-3},new int[]{-1,1,-3,3,-5,7});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{5,72,13,64,7,73,3,-5},new int[]{-4,4,-3,5,-5,7});
    states[4] = new State(-2);
    states[5] = new State(new int[]{5,72,13,64,7,73,3,-5},new int[]{-4,6,-3,5,-5,7});
    states[6] = new State(-4);
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{8,9});
    states[9] = new State(new int[]{5,72,13,64,9,-11},new int[]{-6,10,-9,65,-5,70});
    states[10] = new State(new int[]{9,11});
    states[11] = new State(new int[]{10,12});
    states[12] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64,11,-9},new int[]{-7,13,-8,15,-11,58,-12,36,-5,61});
    states[13] = new State(new int[]{11,14});
    states[14] = new State(-6);
    states[15] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64,11,-9},new int[]{-7,16,-8,15,-11,58,-12,36,-5,61});
    states[16] = new State(-8);
    states[17] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64,11,-9},new int[]{-7,18,-8,15,-11,58,-12,36,-5,61});
    states[18] = new State(new int[]{11,19});
    states[19] = new State(-17);
    states[20] = new State(new int[]{8,21});
    states[21] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,22,-12,36});
    states[22] = new State(new int[]{9,23});
    states[23] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64},new int[]{-8,24,-11,58,-12,36,-5,61});
    states[24] = new State(new int[]{15,25,10,-18,14,-18,16,-18,22,-18,5,-18,20,-18,21,-18,4,-18,19,-18,8,-18,13,-18,11,-18});
    states[25] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64},new int[]{-8,26,-11,58,-12,36,-5,61});
    states[26] = new State(-19);
    states[27] = new State(new int[]{8,28});
    states[28] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,29,-12,36});
    states[29] = new State(new int[]{9,30});
    states[30] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64},new int[]{-8,31,-11,58,-12,36,-5,61});
    states[31] = new State(-20);
    states[32] = new State(new int[]{17,35,5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,33,-12,36});
    states[33] = new State(new int[]{17,34});
    states[34] = new State(-21);
    states[35] = new State(-22);
    states[36] = new State(new int[]{18,37,17,-33,9,-33,12,-33});
    states[37] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,38,-12,36});
    states[38] = new State(-34);
    states[39] = new State(-25);
    states[40] = new State(-26);
    states[41] = new State(-27);
    states[42] = new State(new int[]{23,43,8,50,18,-29,17,-29,9,-29,12,-29});
    states[43] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,44,-12,36});
    states[44] = new State(-28);
    states[45] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,46,-12,36});
    states[46] = new State(-30);
    states[47] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,48,-12,36});
    states[48] = new State(new int[]{9,49});
    states[49] = new State(-32);
    states[50] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47,9,-36},new int[]{-13,51,-11,53,-12,36});
    states[51] = new State(new int[]{9,52});
    states[52] = new State(-31);
    states[53] = new State(new int[]{12,55,9,-38},new int[]{-14,54});
    states[54] = new State(-35);
    states[55] = new State(new int[]{5,39,20,40,21,41,4,42,19,45,8,47},new int[]{-11,56,-12,36});
    states[56] = new State(new int[]{12,55,9,-38},new int[]{-14,57});
    states[57] = new State(-37);
    states[58] = new State(new int[]{17,59});
    states[59] = new State(-23);
    states[60] = new State(new int[]{18,-25,17,-25,4,-15});
    states[61] = new State(new int[]{4,62});
    states[62] = new State(new int[]{17,63});
    states[63] = new State(-24);
    states[64] = new State(-16);
    states[65] = new State(new int[]{12,67,9,-14},new int[]{-10,66});
    states[66] = new State(-10);
    states[67] = new State(new int[]{5,72,13,64},new int[]{-9,68,-5,70});
    states[68] = new State(new int[]{12,67,9,-14},new int[]{-10,69});
    states[69] = new State(-13);
    states[70] = new State(new int[]{4,71});
    states[71] = new State(-12);
    states[72] = new State(-15);
    states[73] = new State(new int[]{4,74});
    states[74] = new State(new int[]{8,75});
    states[75] = new State(new int[]{5,72,13,64,9,-11},new int[]{-6,76,-9,65,-5,70});
    states[76] = new State(new int[]{9,77});
    states[77] = new State(new int[]{10,78});
    states[78] = new State(new int[]{10,17,14,20,16,27,22,32,5,60,20,40,21,41,4,42,19,45,8,47,13,64,11,-9},new int[]{-7,79,-8,15,-11,58,-12,36,-5,61});
    states[79] = new State(new int[]{11,80});
    states[80] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-4, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{});
    rules[6] = new Rule(-3, new int[]{-5,4,8,-6,9,10,-7,11});
    rules[7] = new Rule(-3, new int[]{7,4,8,-6,9,10,-7,11});
    rules[8] = new Rule(-7, new int[]{-8,-7});
    rules[9] = new Rule(-7, new int[]{});
    rules[10] = new Rule(-6, new int[]{-9,-10});
    rules[11] = new Rule(-6, new int[]{});
    rules[12] = new Rule(-9, new int[]{-5,4});
    rules[13] = new Rule(-10, new int[]{12,-9,-10});
    rules[14] = new Rule(-10, new int[]{});
    rules[15] = new Rule(-5, new int[]{5});
    rules[16] = new Rule(-5, new int[]{13});
    rules[17] = new Rule(-8, new int[]{10,-7,11});
    rules[18] = new Rule(-8, new int[]{14,8,-11,9,-8});
    rules[19] = new Rule(-8, new int[]{14,8,-11,9,-8,15,-8});
    rules[20] = new Rule(-8, new int[]{16,8,-11,9,-8});
    rules[21] = new Rule(-8, new int[]{22,-11,17});
    rules[22] = new Rule(-8, new int[]{22,17});
    rules[23] = new Rule(-8, new int[]{-11,17});
    rules[24] = new Rule(-8, new int[]{-5,4,17});
    rules[25] = new Rule(-12, new int[]{5});
    rules[26] = new Rule(-12, new int[]{20});
    rules[27] = new Rule(-12, new int[]{21});
    rules[28] = new Rule(-12, new int[]{4,23,-11});
    rules[29] = new Rule(-12, new int[]{4});
    rules[30] = new Rule(-12, new int[]{19,-11});
    rules[31] = new Rule(-12, new int[]{4,8,-13,9});
    rules[32] = new Rule(-12, new int[]{8,-11,9});
    rules[33] = new Rule(-11, new int[]{-12});
    rules[34] = new Rule(-11, new int[]{-12,18,-11});
    rules[35] = new Rule(-13, new int[]{-11,-14});
    rules[36] = new Rule(-13, new int[]{});
    rules[37] = new Rule(-14, new int[]{12,-11,-14});
    rules[38] = new Rule(-14, new int[]{});

    aliases = new Dictionary<int, string>();
    aliases.Add(4, "id");
    aliases.Add(5, "int");
    aliases.Add(7, "void");
    aliases.Add(8, "(");
    aliases.Add(9, ")");
    aliases.Add(10, "{");
    aliases.Add(11, "}");
    aliases.Add(12, ",");
    aliases.Add(13, "bool");
    aliases.Add(14, "if");
    aliases.Add(15, "else");
    aliases.Add(16, "while");
    aliases.Add(17, ";");
    aliases.Add(18, "bop");
    aliases.Add(19, "uop");
    aliases.Add(20, "true");
    aliases.Add(21, "false");
    aliases.Add(22, "return");
    aliases.Add(23, "=");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 114 "Parser.y"
#line default
}
}
