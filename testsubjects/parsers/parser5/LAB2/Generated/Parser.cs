// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-A3PQD27
// DateTime: 17.01.2019 22:10:28
// UserName: LennardsVM
// Input file <.\Parser.y - 17.01.2019 22:10:22>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Parser
{
public enum Tokens {error=2,EOF=3,BOOLEAN=4,ID=5,NUM=6,
    ERR=7,IF=8,ELSE=9,WHILE=10,RETURN=11,INT=12,
    BOOL=13,VOID=14,TRUE=15,FALSE=16,ASN=17,AND=18,
    OR=19,EQ=20,NEQ=21,LT=22,GT=23,LEQ=24,
    GEQ=25,ADD=26,SUB=27,MUL=28,DIV=29,NOT=30,
    LPAR=31,RPAR=32,LPRA=33,RPRA=34,SEMI=35,COMMA=36};

public struct ValueType
#line 4 ".\Parser.y"
       {
  public string value;
  
  public Expression E;
  public Declaration D;
  public Statement S;
  public List<Expression> L;
  public List<Declaration> DL;
  public List<Statement> Ss;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[56];
  private static State[] states = new State[119];
  private static string[] nonTerms = new string[] {
      "Stmt", "Stmt1", "Stmts", "FormalList", "Decl", "Decls", "Expr", "Expr1", 
      "Expr2", "Expr3", "Expr4", "Expr5", "Expr6", "Expr7", "Expr8", "ExprList", 
      "Program", "$accept", };

  static Parser() {
    states[0] = new State(-4,new int[]{-17,1,-6,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4,12,6,13,103,14,111},new int[]{-5,5});
    states[4] = new State(-2);
    states[5] = new State(-3);
    states[6] = new State(new int[]{5,7});
    states[7] = new State(new int[]{31,8});
    states[8] = new State(new int[]{12,99,13,101,32,-12,36,-12},new int[]{-4,9});
    states[9] = new State(new int[]{32,10,36,94});
    states[10] = new State(new int[]{33,11});
    states[11] = new State(-24,new int[]{-3,12});
    states[12] = new State(new int[]{34,13,33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,14,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[13] = new State(-5);
    states[14] = new State(-23);
    states[15] = new State(-24,new int[]{-3,16});
    states[16] = new State(new int[]{34,17,33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,14,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[17] = new State(-13);
    states[18] = new State(new int[]{31,19});
    states[19] = new State(new int[]{5,35,30,51,27,53,6,56,4,57,31,74},new int[]{-7,20,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[20] = new State(new int[]{32,21});
    states[21] = new State(new int[]{33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,22,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[22] = new State(new int[]{9,24,34,-22,33,-22,8,-22,10,-22,11,-22,5,-22,30,-22,27,-22,6,-22,4,-22,31,-22,12,-22,13,-22},new int[]{-2,23});
    states[23] = new State(-14);
    states[24] = new State(new int[]{33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,25,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[25] = new State(-21);
    states[26] = new State(new int[]{31,27});
    states[27] = new State(new int[]{5,35,30,51,27,53,6,56,4,57,31,74},new int[]{-7,28,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[28] = new State(new int[]{32,29});
    states[29] = new State(new int[]{33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,30,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[30] = new State(-15);
    states[31] = new State(new int[]{35,34,5,35,30,51,27,53,6,56,4,57,31,74},new int[]{-7,32,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[32] = new State(new int[]{35,33});
    states[33] = new State(-16);
    states[34] = new State(-17);
    states[35] = new State(new int[]{17,36,31,59,28,-51,29,-51,26,-51,27,-51,24,-51,25,-51,22,-51,23,-51,20,-51,21,-51,18,-51,19,-51,35,-51,32,-51,36,-51});
    states[36] = new State(new int[]{5,35,30,51,27,53,6,56,4,57,31,74},new int[]{-7,37,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[37] = new State(-25);
    states[38] = new State(new int[]{19,39,35,-26,32,-26,36,-26});
    states[39] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-9,40,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[40] = new State(new int[]{18,41,19,-27,35,-27,32,-27,36,-27});
    states[41] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-10,42,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[42] = new State(new int[]{20,43,21,66,18,-29,19,-29,35,-29,32,-29,36,-29});
    states[43] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-11,44,-12,84,-13,80,-14,81,-15,55});
    states[44] = new State(new int[]{24,45,25,68,22,78,23,82,20,-31,21,-31,18,-31,19,-31,35,-31,32,-31,36,-31});
    states[45] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-12,46,-13,80,-14,81,-15,55});
    states[46] = new State(new int[]{26,47,27,70,24,-34,25,-34,22,-34,23,-34,20,-34,21,-34,18,-34,19,-34,35,-34,32,-34,36,-34});
    states[47] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-13,48,-14,81,-15,55});
    states[48] = new State(new int[]{28,49,29,72,26,-39,27,-39,24,-39,25,-39,22,-39,23,-39,20,-39,21,-39,18,-39,19,-39,35,-39,32,-39,36,-39});
    states[49] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-14,50,-15,55});
    states[50] = new State(-42);
    states[51] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-14,52,-15,55});
    states[52] = new State(-45);
    states[53] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-14,54,-15,55});
    states[54] = new State(-46);
    states[55] = new State(-47);
    states[56] = new State(-48);
    states[57] = new State(-49);
    states[58] = new State(new int[]{31,59,28,-51,29,-51,26,-51,27,-51,24,-51,25,-51,22,-51,23,-51,20,-51,21,-51,18,-51,19,-51,35,-51,32,-51,36,-51});
    states[59] = new State(new int[]{5,35,30,51,27,53,6,56,4,57,31,74,32,-55,36,-55},new int[]{-16,60,-7,85,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[60] = new State(new int[]{32,61,36,62});
    states[61] = new State(-50);
    states[62] = new State(new int[]{5,35,30,51,27,53,6,56,4,57,31,74},new int[]{-7,63,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[63] = new State(-54);
    states[64] = new State(new int[]{18,41,19,-28,35,-28,32,-28,36,-28});
    states[65] = new State(new int[]{20,43,21,66,18,-30,19,-30,35,-30,32,-30,36,-30});
    states[66] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-11,67,-12,84,-13,80,-14,81,-15,55});
    states[67] = new State(new int[]{24,45,25,68,22,78,23,82,20,-32,21,-32,18,-32,19,-32,35,-32,32,-32,36,-32});
    states[68] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-12,69,-13,80,-14,81,-15,55});
    states[69] = new State(new int[]{26,47,27,70,24,-35,25,-35,22,-35,23,-35,20,-35,21,-35,18,-35,19,-35,35,-35,32,-35,36,-35});
    states[70] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-13,71,-14,81,-15,55});
    states[71] = new State(new int[]{28,49,29,72,26,-40,27,-40,24,-40,25,-40,22,-40,23,-40,20,-40,21,-40,18,-40,19,-40,35,-40,32,-40,36,-40});
    states[72] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-14,73,-15,55});
    states[73] = new State(-43);
    states[74] = new State(new int[]{5,35,30,51,27,53,6,56,4,57,31,74},new int[]{-7,75,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[75] = new State(new int[]{32,76});
    states[76] = new State(-52);
    states[77] = new State(new int[]{24,45,25,68,22,78,23,82,20,-33,21,-33,18,-33,19,-33,35,-33,32,-33,36,-33});
    states[78] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-12,79,-13,80,-14,81,-15,55});
    states[79] = new State(new int[]{26,47,27,70,24,-36,25,-36,22,-36,23,-36,20,-36,21,-36,18,-36,19,-36,35,-36,32,-36,36,-36});
    states[80] = new State(new int[]{28,49,29,72,26,-41,27,-41,24,-41,25,-41,22,-41,23,-41,20,-41,21,-41,18,-41,19,-41,35,-41,32,-41,36,-41});
    states[81] = new State(-44);
    states[82] = new State(new int[]{30,51,27,53,6,56,4,57,5,58,31,74},new int[]{-12,83,-13,80,-14,81,-15,55});
    states[83] = new State(new int[]{26,47,27,70,24,-37,25,-37,22,-37,23,-37,20,-37,21,-37,18,-37,19,-37,35,-37,32,-37,36,-37});
    states[84] = new State(new int[]{26,47,27,70,24,-38,25,-38,22,-38,23,-38,20,-38,21,-38,18,-38,19,-38,35,-38,32,-38,36,-38});
    states[85] = new State(-53);
    states[86] = new State(new int[]{35,87});
    states[87] = new State(-18);
    states[88] = new State(new int[]{5,89});
    states[89] = new State(new int[]{35,90});
    states[90] = new State(-19);
    states[91] = new State(new int[]{5,92});
    states[92] = new State(new int[]{35,93});
    states[93] = new State(-20);
    states[94] = new State(new int[]{12,95,13,97});
    states[95] = new State(new int[]{5,96});
    states[96] = new State(-8);
    states[97] = new State(new int[]{5,98});
    states[98] = new State(-9);
    states[99] = new State(new int[]{5,100});
    states[100] = new State(-10);
    states[101] = new State(new int[]{5,102});
    states[102] = new State(-11);
    states[103] = new State(new int[]{5,104});
    states[104] = new State(new int[]{31,105});
    states[105] = new State(new int[]{12,99,13,101,32,-12,36,-12},new int[]{-4,106});
    states[106] = new State(new int[]{32,107,36,94});
    states[107] = new State(new int[]{33,108});
    states[108] = new State(-24,new int[]{-3,109});
    states[109] = new State(new int[]{34,110,33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,14,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[110] = new State(-6);
    states[111] = new State(new int[]{5,112});
    states[112] = new State(new int[]{31,113});
    states[113] = new State(new int[]{12,99,13,101,32,-12,36,-12},new int[]{-4,114});
    states[114] = new State(new int[]{32,115,36,94});
    states[115] = new State(new int[]{33,116});
    states[116] = new State(-24,new int[]{-3,117});
    states[117] = new State(new int[]{34,118,33,15,8,18,10,26,11,31,5,35,30,51,27,53,6,56,4,57,31,74,12,88,13,91},new int[]{-1,14,-7,86,-8,38,-9,64,-10,65,-11,77,-12,84,-13,80,-14,81,-15,55});
    states[118] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-18, new int[]{-17,3});
    rules[2] = new Rule(-17, new int[]{-6,3});
    rules[3] = new Rule(-6, new int[]{-6,-5});
    rules[4] = new Rule(-6, new int[]{});
    rules[5] = new Rule(-5, new int[]{12,5,31,-4,32,33,-3,34});
    rules[6] = new Rule(-5, new int[]{13,5,31,-4,32,33,-3,34});
    rules[7] = new Rule(-5, new int[]{14,5,31,-4,32,33,-3,34});
    rules[8] = new Rule(-4, new int[]{-4,36,12,5});
    rules[9] = new Rule(-4, new int[]{-4,36,13,5});
    rules[10] = new Rule(-4, new int[]{12,5});
    rules[11] = new Rule(-4, new int[]{13,5});
    rules[12] = new Rule(-4, new int[]{});
    rules[13] = new Rule(-1, new int[]{33,-3,34});
    rules[14] = new Rule(-1, new int[]{8,31,-7,32,-1,-2});
    rules[15] = new Rule(-1, new int[]{10,31,-7,32,-1});
    rules[16] = new Rule(-1, new int[]{11,-7,35});
    rules[17] = new Rule(-1, new int[]{11,35});
    rules[18] = new Rule(-1, new int[]{-7,35});
    rules[19] = new Rule(-1, new int[]{12,5,35});
    rules[20] = new Rule(-1, new int[]{13,5,35});
    rules[21] = new Rule(-2, new int[]{9,-1});
    rules[22] = new Rule(-2, new int[]{});
    rules[23] = new Rule(-3, new int[]{-3,-1});
    rules[24] = new Rule(-3, new int[]{});
    rules[25] = new Rule(-7, new int[]{5,17,-7});
    rules[26] = new Rule(-7, new int[]{-8});
    rules[27] = new Rule(-8, new int[]{-8,19,-9});
    rules[28] = new Rule(-8, new int[]{-9});
    rules[29] = new Rule(-9, new int[]{-9,18,-10});
    rules[30] = new Rule(-9, new int[]{-10});
    rules[31] = new Rule(-10, new int[]{-10,20,-11});
    rules[32] = new Rule(-10, new int[]{-10,21,-11});
    rules[33] = new Rule(-10, new int[]{-11});
    rules[34] = new Rule(-11, new int[]{-11,24,-12});
    rules[35] = new Rule(-11, new int[]{-11,25,-12});
    rules[36] = new Rule(-11, new int[]{-11,22,-12});
    rules[37] = new Rule(-11, new int[]{-11,23,-12});
    rules[38] = new Rule(-11, new int[]{-12});
    rules[39] = new Rule(-12, new int[]{-12,26,-13});
    rules[40] = new Rule(-12, new int[]{-12,27,-13});
    rules[41] = new Rule(-12, new int[]{-13});
    rules[42] = new Rule(-13, new int[]{-13,28,-14});
    rules[43] = new Rule(-13, new int[]{-13,29,-14});
    rules[44] = new Rule(-13, new int[]{-14});
    rules[45] = new Rule(-14, new int[]{30,-14});
    rules[46] = new Rule(-14, new int[]{27,-14});
    rules[47] = new Rule(-14, new int[]{-15});
    rules[48] = new Rule(-15, new int[]{6});
    rules[49] = new Rule(-15, new int[]{4});
    rules[50] = new Rule(-15, new int[]{5,31,-16,32});
    rules[51] = new Rule(-15, new int[]{5});
    rules[52] = new Rule(-15, new int[]{31,-7,32});
    rules[53] = new Rule(-16, new int[]{-7});
    rules[54] = new Rule(-16, new int[]{-16,36,-7});
    rules[55] = new Rule(-16, new int[]{});

    aliases = new Dictionary<int, string>();
    aliases.Add(8, "if");
    aliases.Add(9, "else");
    aliases.Add(10, "while");
    aliases.Add(11, "return");
    aliases.Add(12, "int");
    aliases.Add(13, "bool");
    aliases.Add(14, "void");
    aliases.Add(15, "true");
    aliases.Add(16, "false");
    aliases.Add(17, "=");
    aliases.Add(18, "&&");
    aliases.Add(19, "||");
    aliases.Add(20, "==");
    aliases.Add(21, "!=");
    aliases.Add(22, "<");
    aliases.Add(23, ">");
    aliases.Add(24, "<=");
    aliases.Add(25, ">=");
    aliases.Add(26, "+");
    aliases.Add(27, "-");
    aliases.Add(28, "*");
    aliases.Add(29, "/");
    aliases.Add(30, "!");
    aliases.Add(31, "(");
    aliases.Add(32, ")");
    aliases.Add(33, "{");
    aliases.Add(34, "}");
    aliases.Add(35, ";");
    aliases.Add(36, ",");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Decls, EOF
#line 62 ".\Parser.y"
                                                      { Program = new Program1(ValueStack[ValueStack.Depth-2].DL); }
#line default
        break;
      case 3: // Decls -> Decls, Decl
#line 65 ".\Parser.y"
                                                      { CurrentSemanticValue.DL = ValueStack[ValueStack.Depth-2].DL; CurrentSemanticValue.DL.Add(ValueStack[ValueStack.Depth-1].D);}
#line default
        break;
      case 4: // Decls -> /* empty */
#line 66 ".\Parser.y"
                                                  { CurrentSemanticValue.DL = new List<Declaration>(); }
#line default
        break;
      case 5: // Decl -> "int", ID, "(", FormalList, ")", "{", Stmts, "}"
#line 69 ".\Parser.y"
                                                       { CurrentSemanticValue.D = new TypeDeclaration(TypeDeclaration.Type.INT, ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].Ss, ValueStack[ValueStack.Depth-2].Ss); CurrentSemanticValue.D.SetLocation(LocationStack[LocationStack.Depth-8]); }
#line default
        break;
      case 6: // Decl -> "bool", ID, "(", FormalList, ")", "{", Stmts, "}"
#line 70 ".\Parser.y"
                                                      { CurrentSemanticValue.D = new TypeDeclaration(TypeDeclaration.Type.BOOL, ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].Ss, ValueStack[ValueStack.Depth-2].Ss); CurrentSemanticValue.D.SetLocation(LocationStack[LocationStack.Depth-8]); }
#line default
        break;
      case 7: // Decl -> "void", ID, "(", FormalList, ")", "{", Stmts, "}"
#line 71 ".\Parser.y"
                                                         { CurrentSemanticValue.D = new TypeDeclaration(TypeDeclaration.Type.VOID, ValueStack[ValueStack.Depth-7].value, ValueStack[ValueStack.Depth-5].Ss, ValueStack[ValueStack.Depth-2].Ss); CurrentSemanticValue.D.SetLocation(LocationStack[LocationStack.Depth-8]); }
#line default
        break;
      case 8: // FormalList -> FormalList, ",", "int", ID
#line 74 ".\Parser.y"
                                                        { CurrentSemanticValue.Ss = ValueStack[ValueStack.Depth-4].Ss; CurrentSemanticValue.Ss.Add(new TypeDef(TypeDef.Type.INT, ValueStack[ValueStack.Depth-1].value)); }
#line default
        break;
      case 9: // FormalList -> FormalList, ",", "bool", ID
#line 75 ".\Parser.y"
                                                  { CurrentSemanticValue.Ss = ValueStack[ValueStack.Depth-4].Ss; CurrentSemanticValue.Ss.Add(new TypeDef(TypeDef.Type.BOOL, ValueStack[ValueStack.Depth-1].value)); }
#line default
        break;
      case 10: // FormalList -> "int", ID
#line 76 ".\Parser.y"
                                                  { CurrentSemanticValue.Ss = new List<Statement>(); CurrentSemanticValue.Ss.Add(new TypeDef(TypeDef.Type.INT, ValueStack[ValueStack.Depth-1].value));}
#line default
        break;
      case 11: // FormalList -> "bool", ID
#line 77 ".\Parser.y"
                                                     { CurrentSemanticValue.Ss = new List<Statement>(); CurrentSemanticValue.Ss.Add(new TypeDef(TypeDef.Type.BOOL, ValueStack[ValueStack.Depth-1].value));}
#line default
        break;
      case 12: // FormalList -> /* empty */
#line 78 ".\Parser.y"
                        { CurrentSemanticValue.Ss = new List<Statement>(); }
#line default
        break;
      case 13: // Stmt -> "{", Stmts, "}"
#line 83 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new BlockStatement(ValueStack[ValueStack.Depth-2].Ss); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 14: // Stmt -> "if", "(", Expr, ")", Stmt, Stmt1
#line 84 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new IfStatement(ValueStack[ValueStack.Depth-4].E, ValueStack[ValueStack.Depth-2].S, ValueStack[ValueStack.Depth-1].S); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-6]); }
#line default
        break;
      case 15: // Stmt -> "while", "(", Expr, ")", Stmt
#line 85 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new WhileStatement(ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].S); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-5]); }
#line default
        break;
      case 16: // Stmt -> "return", Expr, ";"
#line 86 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new ReturnStatement(ValueStack[ValueStack.Depth-2].E); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 17: // Stmt -> "return", ";"
#line 87 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new ReturnStatement(); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 18: // Stmt -> Expr, ";"
#line 88 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new ExpressionStatement(ValueStack[ValueStack.Depth-2].E); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 19: // Stmt -> "int", ID, ";"
#line 89 ".\Parser.y"
                                 { CurrentSemanticValue.S = new TypeDef(TypeDef.Type.INT, ValueStack[ValueStack.Depth-2].value); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 20: // Stmt -> "bool", ID, ";"
#line 90 ".\Parser.y"
                                                      { CurrentSemanticValue.S = new TypeDef(TypeDef.Type.BOOL, ValueStack[ValueStack.Depth-2].value); CurrentSemanticValue.S.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 21: // Stmt1 -> "else", Stmt
#line 93 ".\Parser.y"
                                                      { CurrentSemanticValue.S = ValueStack[ValueStack.Depth-1].S; }
#line default
        break;
      case 23: // Stmts -> Stmts, Stmt
#line 97 ".\Parser.y"
                                                      { CurrentSemanticValue.Ss = ValueStack[ValueStack.Depth-2].Ss; CurrentSemanticValue.Ss.Add(ValueStack[ValueStack.Depth-1].S); }
#line default
        break;
      case 24: // Stmts -> /* empty */
#line 98 ".\Parser.y"
                  { CurrentSemanticValue.Ss = new List<Statement>(); }
#line default
        break;
      case 25: // Expr -> ID, "=", Expr
#line 101 ".\Parser.y"
                               { CurrentSemanticValue.E = new AssignmentExpression(ValueStack[ValueStack.Depth-3].value, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 26: // Expr -> Expr1
#line 102 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 27: // Expr1 -> Expr1, "||", Expr2
#line 105 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.OR, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 28: // Expr1 -> Expr2
#line 106 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 29: // Expr2 -> Expr2, "&&", Expr3
#line 109 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.AND, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 30: // Expr2 -> Expr3
#line 110 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 31: // Expr3 -> Expr3, "==", Expr4
#line 113 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.EQ, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 32: // Expr3 -> Expr3, "!=", Expr4
#line 114 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.NEQ, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 33: // Expr3 -> Expr4
#line 115 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 34: // Expr4 -> Expr4, "<=", Expr5
#line 118 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.LEQ, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 35: // Expr4 -> Expr4, ">=", Expr5
#line 119 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.GEQ, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 36: // Expr4 -> Expr4, "<", Expr5
#line 120 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.LT, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 37: // Expr4 -> Expr4, ">", Expr5
#line 121 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.GT, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 38: // Expr4 -> Expr5
#line 122 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 39: // Expr5 -> Expr5, "+", Expr6
#line 125 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.ADD, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 40: // Expr5 -> Expr5, "-", Expr6
#line 126 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.SUB, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 41: // Expr5 -> Expr6
#line 127 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 42: // Expr6 -> Expr6, "*", Expr7
#line 130 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.MUL, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 43: // Expr6 -> Expr6, "/", Expr7
#line 131 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BinaryOperatorExpression(BinaryOperatorExpression.Type.DIV, ValueStack[ValueStack.Depth-3].E, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-3]); }
#line default
        break;
      case 44: // Expr6 -> Expr7
#line 132 ".\Parser.y"
                                                      { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 45: // Expr7 -> "!", Expr7
#line 135 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new UnaryExpression(UnaryExpression.Type.NOT, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 46: // Expr7 -> "-", Expr7
#line 136 ".\Parser.y"
                              { CurrentSemanticValue.E = new UnaryExpression(UnaryExpression.Type.NEG, ValueStack[ValueStack.Depth-1].E); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 47: // Expr7 -> Expr8
#line 137 ".\Parser.y"
                                                   { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-1].E; }
#line default
        break;
      case 48: // Expr8 -> NUM
#line 140 ".\Parser.y"
                         { CurrentSemanticValue.E = new NumberExpression(ValueStack[ValueStack.Depth-1].value); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 49: // Expr8 -> BOOLEAN
#line 141 ".\Parser.y"
                                                      { CurrentSemanticValue.E = new BoolExpression(ValueStack[ValueStack.Depth-1].value); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 50: // Expr8 -> ID, "(", ExprList, ")"
#line 142 ".\Parser.y"
                                     { CurrentSemanticValue.E = new FunctionExpression(ValueStack[ValueStack.Depth-4].value, ValueStack[ValueStack.Depth-2].L); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-4]); }
#line default
        break;
      case 51: // Expr8 -> ID
#line 143 ".\Parser.y"
                       { CurrentSemanticValue.E = new IdentifierExpression(ValueStack[ValueStack.Depth-1].value); CurrentSemanticValue.E.SetLocation(LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 52: // Expr8 -> "(", Expr, ")"
#line 144 ".\Parser.y"
                             { CurrentSemanticValue.E = ValueStack[ValueStack.Depth-2].E;}
#line default
        break;
      case 53: // ExprList -> Expr
#line 147 ".\Parser.y"
                           { CurrentSemanticValue.L = new List<Expression>(); CurrentSemanticValue.L.Add(ValueStack[ValueStack.Depth-1].E);}
#line default
        break;
      case 54: // ExprList -> ExprList, ",", Expr
#line 148 ".\Parser.y"
                              { CurrentSemanticValue.L = ValueStack[ValueStack.Depth-3].L; CurrentSemanticValue.L.Add(ValueStack[ValueStack.Depth-1].E);}
#line default
        break;
      case 55: // ExprList -> /* empty */
#line 149 ".\Parser.y"
                { CurrentSemanticValue.L = new List<Expression>();}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 153 ".\Parser.y"
public Parser(Scanner s) : base(s) { }
public Program1 Program; 
#line default
}
}
